rrname: NASA Images Pipeline

on:
  push:
    branches:
      - main

jobs:
  download_images:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq for JSON parsing
        run: sudo apt-get install jq

      - name: Load NASA API Key
        id: nasa_api_key
        run: echo "API_KEY=${{ secrets.NASA_API_KEY }}" >> $GITHUB_ENV

      - name: Load Dates from JSON
        id: load_dates
        run: |
          # Cargar fechas desde el archivo JSON
          DATES=$(jq -r '.dates[]' data.json)
          # Guardar las fechas en un archivo temporal para usarlas m치s adelante
          echo "$DATES" > dates.tmp

      - name: Fetch and Cache Images from NASA API
        run: |
          CACHE_DIR="cache"
          IMAGE_DIR="images"
          # Leer fechas desde el archivo temporal
          while read -r DATE; do
            # Crear directorios si no existen
            mkdir -p $CACHE_DIR
            mkdir -p $IMAGE_DIR

            CACHE_FILE="$CACHE_DIR/$DATE.json"
            IMAGE_FILE="$IMAGE_DIR/img-$DATE.jpg"

            # Revisar si el cache existe
            if [ -f "$CACHE_FILE" ]; then
              echo "Cache encontrado para la fecha $DATE."
              URL=$(jq -r '.url' "$CACHE_FILE")
            else
              # Hacer la petici칩n al API
              RESPONSE=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=edwmxvlXzVcREu4iq5nPKVJ619dKLUtCCLNHKwQ6&date=$DATE")
              
              # Guardar la respuesta en cache
              echo "$RESPONSE" > "$CACHE_FILE"

              # Obtener la URL de la imagen
              URL=$(echo "$RESPONSE" | jq -r '.url') 
              echo $URL
            fi

            # Verificar si la URL es v치lida
            if [[ "$URL" != "null" ]]; then
              echo "Descargando imagen para la fecha $DATE."
              curl -s "$URL" --output "$IMAGE_FILE"
              # Subir artefacto para la imagen descargada
              echo "Subiendo artefacto para la imagen de la fecha $DATE."
              echo "img-$DATE" >> artifacts.tmp
              echo "$IMAGE_FILE" >> artifacts.tmp
            else
              echo "No se encontr칩 imagen para la fecha $DATE."
            fi
          done < dates.tmp

      - name: Upload images as artifacts
        run: |
          while read -r line; do
            img_name=$(echo "$line" | awk '{print $1}')
            img_path=$(echo "$line" | awk '{print $2}')
            echo "Subiendo artefacto: $img_name"
            echo "Upload artifact $img_name"
            actions/upload-artifact@v3
            with:
              name: "$img_name"
              path: "$img_path"
              retention-days: 1
          done < artifacts.tmp
